# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

pr: none

variables:
  workDir: $(System.DefaultWorkingDirectory)
  workspace: $(Pipeline.Workspace)
  currentBranch: $(Build.SourceBranch)
  isBranchToRelease: $[or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/beta'))]

stages:

- stage: Prepare_version
  displayName: Prepare version
  jobs:
  - job: Linux
    displayName: Prepare Version
    pool:
      vmImage: 'ubuntu-16.04'
    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: npm i @process-engine/ci_tools
      displayName: 'Install CI Tools'

    - script: |
        node ./node_modules/.bin/ci_tools prepare-version --allow-dirty-workdir
      displayName: 'Prepare version'
      env:
        GIT_BRANCH: $(currentBranch)

    - script: cat package.json

    - publish: './package.json'
      artifact: package_json


- stage: Build_and_test
  displayName: Build and test
  jobs:
  - job: Lint_sources
    displayName: Lint sources
    pool:
      vmImage: 'ubuntu-16.04'
    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: npm ci
      displayName: 'Install dependencies'

    - script: npm run lint
      displayName: 'Lint sources'

  - job: Build_and_test_web
    displayName: Build and test web app
    pool:
      vmImage: 'ubuntu-16.04'
    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - download: current
      artifact: package_json

    - script: mv $(workspace)/package_json/package.json $(workDir)/package.json
      displayName: Move package.json to working dir

    - script: cat package.json
    
    - script: |
        npm ci
        ./node_modules/.bin/ci_tools npm-install-only --except-on-primary-branches @process-engine/ @essential-projects/
      displayName: 'Install dependencies'

    - script: npm run build
      displayName: 'Build web app'

    - script: xvfb-run --auto-servernum npm test
      displayName: 'Test web app'

    - script: | 
        mkdir -p dist_web/dist/web
        cp index.html dist_web/index.html
        cp -r dist/web dist_web/dist
        mkdir -p dist_web/src/resources
        cp -r src/resources dist_web/src
        cp favicon.ico dist_web/
      displayName: 'Prepare Web Bundle'
    
    - publish: 'dist_web'
      artifact: dist_web

  - job: Build_and_test_Windows
    displayName: Build and test Windows app
    pool:
      vmImage: 'vs2017-win2016'
    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - download: current
      artifact: package_json

    - powershell: Move-Item -Path $(workspace)\package_json\package.json -Destination $(workdir)\package.json
      displayName: Move package.json to working dir

    - script: cat package.json

    - script: |
        npm ci
        ./node_modules/.bin/ci_tools npm-install-only --except-on-primary-branches @process-engine/ @essential-projects/
      displayName: 'Install dependencies'

    - script: npm run electron-build-windows
      displayName: 'Build the Windows app'

    - script: npm test
      displayName: 'Test the Windows app'

    - powershell: |
        mkdir dist_electron_windows
        copy-item .\dist\electron\bpmn-studio-setup-**.exe .\dist_electron_windows\
      displayName: 'Prepare Windows Bundle'

    - powershell: |
        copy-item .\dist\electron\bpmn-studio-setup-**.exe.blockmap .\dist_electron_windows\
        copy-item .\dist\electron\latest.yml .\dist_electron_windows\
      displayName: 'Prepare Windows Bundle for GitHub Release'
      condition: eq(variables['isBranchToRelease'], true)

    - publish: 'dist_electron_windows'
      artifact: dist_electron_windows

  - job: Build_and_test_macOS
    displayName: Build and test macOS app
    pool:
      vmImage: 'macOS-latest'
    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - download: current
      artifact: package_json

    - script: mv $(workspace)/package_json/package.json $(workDir)/package.json
      displayName: Move package.json to working dir

    - script: cat package.json

    - script: |
        npm ci
        ./node_modules/.bin/ci_tools npm-install-only --except-on-primary-branches @process-engine/ @essential-projects/
      displayName: 'Install dependencies'

    - script: npm run electron-build-macos
      displayName: 'Build the macOS app'
      env:
        CSC_LINK: $(CSC_LINK)

    - script: npm test
      displayName: 'Test the macOS app'

    - script: |
        mkdir dist_electron_macos
        cp dist/electron/bpmn-studio-setup**.zip dist_electron_macos
        cp dist/electron/bpmn-studio-setup**.dmg dist_electron_macos
      displayName: 'Prepare macOS Bundle'

    - script: |
        cp dist/electron/bpmn-studio-setup**.dmg.blockmap dist_electron_macos
        cp dist/electron/latest-mac.yml dist_electron_macos
      displayName: 'Prepare macOS Bundle for GitHub Release'
      condition: eq(variables['isBranchToRelease'], true)

    - publish: 'dist_electron_macos'
      artifact: dist_electron_macos

- stage: Commit_and_tag_version
  displayName: Commit & tag version
  jobs:
  - job: Commit_and_tag
    displayName: Commit and tag new version
    pool:
      vmImage: 'ubuntu-16.04'
    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: npm i @process-engine/ci_tools
      displayName: 'Install CI Tools'

    - download: current
      artifact: package_json

    - script: mv $(workspace)/package_json/package.json $(workDir)/package.json
      displayName: Move package.json to working dir

    - script: cat package.json

    - script: |
        ./node_modules/.bin/ci_tools commit-and-tag-version --only-on-primary-branches
        ./node_modules/.bin/ci_tools update-github-release --only-on-primary-branches --use-title-and-text-from-git-tag
      displayName: 'Commit and Tag'
      env:
        # User has to have 'admin' privileges on the repo (to be able to push to protected branches).
        GH_USER: $(GH_USER)
        GH_TOKEN: $(GH_TOKEN)
        GIT_BRANCH: $(currentBranch)

- stage: Publish
  jobs:
  - job: Publish_npm_package
    displayName: Publish npm package
    pool:
      vmImage: 'ubuntu-16.04'
    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: npm i @process-engine/ci_tools
      displayName: 'Install CI Tools'

    - download: current
      artifact: package_json

    - script: mv $(workspace)/package_json/package.json $(workDir)/package.json
      displayName: Move package.json to working dir

    - script: cat package.json

    - script: |
        ./node_modules/.bin/ci_tools publish-npm-package --create-tag-from-branch-name
      displayName: 'Publish to npm'
      env:
        NPM_TOKEN: $(NPM_TOKEN)
        GIT_BRANCH: $(currentBranch)
  
  - job: Publish_GitHub_release
    displayName: Publish GitHub Release
    pool:
      vmImage: 'ubuntu-16.04'
    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: npm i @process-engine/ci_tools
      displayName: 'Install CI Tools'

    - download: current
      artifact: package_json

    - script: mv $(workspace)/package_json/package.json $(workDir)/package.json
      displayName: Move package.json to working dir

    - download: current
      artifact: dist_electron_windows

    - download: current
      artifact: dist_electron_macos

    #- script: |
    #    ./node_modules/.bin/ci_tools update-github-release \
    #                  --assets $(workspace)/dist_electron_windows/bpmn-studio-setup-*.exe \
    #                  --assets $(workspace)/dist_electron_windows/bpmn-studio-setup-*.exe.blockmap \
    #                  --assets $(workspace)/dist_electron_macos/bpmn-studio-setup-*.zip \
    #                  --assets $(workspace)/dist_electron_macos/bpmn-studio-setup-*.dmg \
    #                  --assets $(workspace)/dist_electron_macos/bpmn-studio-setup-*.dmg.blockmap \
    #                  --assets $(workspace)/dist_electron_macos/latest-mac.yml \
    #                  --assets $(workspace)/dist_electron_windows/latest.yml
    #  displayName: 'Upload GitHub Release'
    #  env:
    #    GH_USER: $(GH_USER)
    #    GH_TOKEN: $(GH_TOKEN)
